// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id        String   @id @default(uuid())
  name_uz   String?
  name_en   String?
  name_ru   String?
  createdAt DateTime @default(now())
  User      User[]
}

model User {
  id          String        @id @default(uuid())
  fullname    String
  password    String
  email       String
  phone       String?
  address     String?
  region      Region?       @relation(fields: [regionId], references: [id])
  regionId    String?
  role        UserRole
  INN         String?
  MFO         String?
  RC          String?
  Bank        String?
  Oked        String?
  createdAt   DateTime      @default(now())
  Sessions    Sessions[]
  Order       Order[]
  FAQ         FAQ[]
  Comment     Comment[]
  Star        Star[]
  BasketItems BasketItems[]
}

enum UserRole {
  USERFIZ
  USERYUR
  ADMIN
  SUPERADMIN
  VIEWERADMIN
}

model Sessions {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  ip_address String
  deviceData Json
  createdAt  DateTime @default(now())
}

model Brand {
  id        String   @id @default(uuid())
  name_uz   String?
  name_en   String?
  name_ru   String?
  createdAt DateTime @default(now())
  Tools     Tools[]
}

model Capacity {
  id        String   @id @default(uuid())
  name_uz   String?
  name_en   String?
  name_ru   String?
  createdAt DateTime @default(now())
  Tools     Tools[]
}

model Size {
  id        String   @id @default(uuid())
  name_uz   String?
  name_en   String?
  name_ru   String?
  createdAt DateTime @default(now())
  Tools     Tools[]
}

model Tools {
  id             String        @id @default(uuid())
  name_uz        String?
  name_en        String?
  name_ru        String?
  description_uz String?
  description_en String?
  description_ru String?
  price          Float
  quantity       Int
  code           Int           @default(autoincrement())
  brand          Brand         @relation(fields: [brandId], references: [id])
  brandId        String
  capacity       Capacity      @relation(fields: [capacityId], references: [id])
  capacityId     String
  size           Size          @relation(fields: [sizeId], references: [id])
  sizeId         String
  isActive       Boolean
  image          String
  products       Product[]     @relation("ProductsTools")
  createdAt      DateTime      @default(now())
  OrderTools     OrderTools[]
  BasketItems    BasketItems[]
}

model Product {
  id          String        @id @default(uuid())
  isActive    Boolean       @default(true)
  name_uz     String?
  name_en     String?
  name_ru     String?
  image       String
  levels      Level[]       @relation("ProductsLevels")
  tools       Tools[]       @relation("ProductsTools")
  createdAt   DateTime      @default(now())
  OrderItems  OrderItems[]
  BasketItems BasketItems[]
  MasterItems MasterItems[]
}

model Level {
  id              String        @id @default(uuid())
  name_uz         String?
  name_en         String?
  name_ru         String?
  minWorkingHours Int
  priceHourly     Int
  priceDaily      Int
  products        Product[]     @relation("ProductsLevels")
  createdAt       DateTime      @default(now())
  OrderItems      OrderItems[]
  BasketItems     BasketItems[]
  MasterItems     MasterItems[]
}

model Master {
  id            String        @id @default(uuid())
  fullname      String
  phone         String
  isActive      Boolean
  year          Int
  image         String
  passportImage String
  about         String
  createdAt     DateTime      @default(now())
  Star          Star[]
  Order         Order[]       @relation("OrderMaster")
  MasterItems   MasterItems[]
  OrderMaster   OrderMaster[]
}

model MasterItems {
  id              String   @id @default(uuid())
  master          Master   @relation(fields: [masterId], references: [id])
  masterId        String
  product         Product  @relation(fields: [productId], references: [id])
  productId       String
  minWorkingHours Int
  level           Level    @relation(fields: [levelId], references: [id])
  levelId         String
  priceHourly     Int
  priceDaily      Int
  createdAt       DateTime @default(now())
}

model Star {
  id        String   @id @default(uuid())
  master    Master   @relation(fields: [masterId], references: [id])
  masterId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  star      Float
  createdAt DateTime @default(now())
}

model Order {
  id                String        @id @default(uuid())
  total             Float?
  location          Json
  address           String
  date              DateTime
  paymentType       paymentEnum
  withDelivery      Boolean
  status            OrderStatus
  commentToDelivery String
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  master            Master[]      @relation("OrderMaster")
  createdAt         DateTime      @default(now())
  Comment           Comment[]
  OrderItems        OrderItems[]
  OrderTools        OrderTools[]
  OrderMaster       OrderMaster[]
}

model OrderItems {
  id            String       @id @default(uuid())
  order         Order        @relation(fields: [orderId], references: [id])
  orderId       String
  product       Product      @relation(fields: [productId], references: [id])
  productId     String
  level         Level        @relation(fields: [levelId], references: [id])
  levelId       String
  quantity      Int
  meansure      meansureEnum
  meansureCount Float?
  createdAt     DateTime     @default(now())
}

model OrderTools {
  id        String   @id @default(uuid())
  total     Float?
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  tool      Tools    @relation(fields: [toolsId], references: [id])
  toolsId   String
  count     Int
  createdAt DateTime @default(now())
}

model OrderMaster {
  orderId  String
  masterId String

  order  Order  @relation(fields: [orderId], references: [id])
  master Master @relation(fields: [masterId], references: [id])

  @@id([orderId, masterId]) // âœ… Kompozit primary key
}

enum meansureEnum {
  DAY
  HOUR
}

enum paymentEnum {
  CASH
  CARD
}

model BasketItems {
  id        String       @id @default(uuid())
  product   Product?     @relation(fields: [productId], references: [id])
  productId String?
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  level     Level?       @relation(fields: [levelId], references: [id])
  levelId   String?
  tool      Tools?       @relation(fields: [toolId], references: [id])
  toolId    String?
  quantity  Int
  meansure  meansureEnum
  total     Float?
  createdAt DateTime     @default(now())
}

enum OrderStatus {
  ACTIVE
  PENDING
  SAVED
}

model Comment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  createdAt DateTime @default(now())
}

model GeneralInfo {
  id        String   @id @default(uuid())
  email     String[]
  links     String[]
  phones    String[]
  tgId      String
  createdAt DateTime @default(now())
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  surName   String
  phone     String
  address   String
  message   String
  createdAt DateTime @default(now())
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  answer    String?
  createdAt DateTime @default(now())
}

model Showcase {
  id             String   @id @default(uuid())
  name_uz        String?
  name_en        String?
  name_ru        String?
  description_uz String?
  description_en String?
  description_ru String?
  image          String
  link           String
  createdAt      DateTime @default(now())
}

model Partners {
  id        String   @id @default(uuid())
  name_uz   String?
  name_en   String?
  name_ru   String?
  link      String
  image     String
  createdAt DateTime @default(now())
}
